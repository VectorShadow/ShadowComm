package main;

import crypto.ByteCipher;
import crypto.HexCipher;
import crypto.RSA;

import java.math.BigInteger;

public class CryptoTester {
    public static void main(String[] args) {
//        int[] values = new int[256];
//        for (int i = 0; i < 256; ++i) values[i] = 0;
//        for (int i = 0; i < 65_536; ++i) values[ByteCipher.randomByte() + 128]++;
//        for (int i = 0; i < 256; ++i) System.out.println(i + ": " + values[i]);
//        System.out.println("Session key = " + HexCipher.convertToHexString(ByteCipher.getSessionKey()));
//        String test = "Hello world!";
//        System.out.println("message bytes: " + test.getBytes() + "\nas Hex: " + HexCipher.convertToHexString(test.getBytes()));
//        System.out.println("test message: " + test + "\nas Hex: " + HexCipher.convertToHexString(test));
//        byte[] encrypted = ByteCipher.encrypt(test.getBytes());
//        System.out.println("Encrypted bytes: " + encrypted + "\nas Hex: " + HexCipher.convertToHexString(encrypted));
//        String encryptedString = new String(encrypted);
//        System.out.println("encrypted message: " + encryptedString + "\nas Hex: " + HexCipher.convertToHexString(encryptedString));
//        byte[] decrypted = ByteCipher.decrypt(encrypted);
//        System.out.println("Decrypted bytes: " + decrypted + "\nas Hex: " + HexCipher.convertToHexString(decrypted));
//        String decryptedString = new String(decrypted);
//        System.out.println("decrypted message: " + decryptedString + "\nas Hex: " + HexCipher.convertToHexString(decryptedString));
        ByteCipher.getSessionKey();
        RSA.generateSessionKeys();
//        byte[] plainTest = new byte[]{25, 16, -27, 88, -113, 0, 77, 4};
//        System.out.println("Test message: " + plainTest);
//        String hexedTest = HexCipher.convertToHexString(plainTest);
//        System.out.println("Hexed test message: " + hexedTest);
//        BigInteger asBigInteger = new BigInteger(hexedTest, 16);
//        System.out.println("As BigInteger: " + asBigInteger);
//        BigInteger publicKeyEncrypted = RSA.encrypt(asBigInteger, RSA.getSessionPublicKey());
//        System.out.println("RSA Encrypted: " + publicKeyEncrypted);
//        BigInteger publicKeyDecrypted = RSA.decrypt(publicKeyEncrypted);
//        System.out.println("RSA Decrypted: " + publicKeyDecrypted);
//        String backToString = publicKeyDecrypted.toString(16);
//        System.out.println("Back to String: " + backToString);
//        byte[] dehexedTest = HexCipher.convertFromHexString(backToString);
//        System.out.println("De-hexed test message: \n");
//        for (int i = 0; i < dehexedTest.length; ++i)
//            System.out.println(dehexedTest[i] + "");
        BigInteger testBigInt = new BigInteger("1624092838118491480955211948631993001581591070137852004240529756635751398786163082419593420448580142897106050836046073344338232527334374481772698116191183080243564930984814169629098402065211885138077385313980840825925010830941190060165858577270044994168419380878666908003460957022086419210426838271091291471343111837806577485551041025763248970173931899684933216483314340592211012543217187762599078122684265841967706550931057627681655468081764261372737385762559481601622519979898698553356920679870353975732378545090909682937852912025923850219900547744764730608940046206937803193543312175078551760879882591437979724606460043882829302129172953142024152508245627765395910679363581728740085248689227586857537258916720589125307756754872943368709260382032996045094276660251450289222950185850924052823768908362927786663188997031833073423908028054341039930733499478251381428883506734868164487717573885008593242803649082861873767378974");
        BigInteger testPublicKey = new BigInteger("3421160555191326475939297780974263690526070182858632505895342715293999176441427287030322341009708162914128453189651837458512127787162037232765226452357129952271072955723162941814599494619573658127115209796516071881737176442637194433945107423818008691660474322552739994477881589774463601551788217653167568585418741030845645621841157559348251553208913556940679503886355803212731853704640014932600590684041305265209868071047816447699103239028074180676622986731004311092167529087774086758075915554424688375322980031100451912428647728629113474032121220181927890330652566591001678061257455587109133432404715607893189906185086338607246312469427580515046580414981867192113964672607617691596960194694589093615666936371099777182791312105874224077993828324269078227015217965866511764275663259698371228043653510943608382932890932541929490888668004834783796145068212544147773303642256718095923631722913789792796485182757863427752553578573");
        BigInteger testPrivateKey = new BigInteger("2054199749871582284124804415507549178111469670043945370393634606245848323727766073697761790150190364509114984840105428320336767635879172484955741430439376546863893554490779024418974086588871065519631820509066694304259267744849722113770449093407730900491803486073101782545724070970824376835442851410192669658434363463460442206159442621998459600993697565942485605954376721733131073670312788617311836733565915490353136677965158994665721829790709783539157897841703930533004360996711740916024387052631896328392923832375389202819097905861162987168606586684924845713307017554412853721565188855864941350305272783369679240340716915376397245389995783551961095894445289925358145139201864258409223515556250795912123358563821683728892722499951190086959561885275677941040033594410264538822632291714755392288898590732921469014890211712679811737422723060037318182150063819962490107086808779888492433191115852216427197258235385973243184156037");
        BigInteger testEncryption = RSA.encrypt(testBigInt, testPublicKey);
        System.out.println("Encrypted to " + testEncryption);
        BigInteger testDecryption = testEncryption.modPow(testPrivateKey, testPublicKey);
        System.out.println("Decrypted to " + testDecryption);
    }
}
